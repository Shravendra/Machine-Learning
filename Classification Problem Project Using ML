{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e494a747",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9a5c75f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_preg</th>\n",
       "      <th>glucose_conc</th>\n",
       "      <th>diastolic_bp</th>\n",
       "      <th>thickness</th>\n",
       "      <th>insulin</th>\n",
       "      <th>bmi</th>\n",
       "      <th>diab_pred</th>\n",
       "      <th>age</th>\n",
       "      <th>diabetes_orig</th>\n",
       "      <th>skin</th>\n",
       "      <th>has_diabetes</th>\n",
       "      <th>diabetes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>1.3790</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>1.1426</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>0.9062</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>1.3790</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   num_preg  glucose_conc  diastolic_bp  thickness  insulin   bmi  diab_pred  \\\n",
       "0         6           148            72         35        0  33.6      0.627   \n",
       "1         1            85            66         29        0  26.6      0.351   \n",
       "2         8           183            64          0        0  23.3      0.672   \n",
       "3         1            89            66         23       94  28.1      0.167   \n",
       "4         0           137            40         35      168  43.1      2.288   \n",
       "\n",
       "   age  diabetes_orig    skin  has_diabetes  diabetes  \n",
       "0   50              1  1.3790          True      True  \n",
       "1   31              0  1.1426         False     False  \n",
       "2   32              1  0.0000          True      True  \n",
       "3   21              0  0.9062         False     False  \n",
       "4   33              1  1.3790          True      True  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_excel('pima-data.xlsx') # loading the data.\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d51d7959",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().values.any() #Checking whether is it having null values or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9053454c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().values.any() #Checking whether is it having NAN values or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "85a24db0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# checking any dulicate column or not using corelation vlaue method.\n",
    "def plot_corr(df, size = 10): # declaring default fig size i.e 10.\n",
    "    corr = df.corr()\n",
    "    fig, ax = plt.subplots(figsize=(size, size))\n",
    "    ax.matshow(corr) # matshow is used to show the corelation betwwen two columns or not.\n",
    "    plt.xticks(range(len(corr.columns)), corr.columns, rotation = 20) # using rotation method to rotate the columns name by 20 degree.\n",
    "    plt.yticks(range(len(corr.columns)), corr.columns)\n",
    "    # xticks and yticks used to show columns name instead of index position.\n",
    "plot_corr(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2d0c53aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # other method \n",
    "# corr = df.corr()\n",
    "# fig, ax = plt.subplots(figsize=(8, 8))\n",
    "# ax.matshow(corr)\n",
    "# plt.xticks(range(len(corr.columns)), corr.columns, rotation = 20)\n",
    "# plt.yticks(range(len(corr.columns)), corr.columns)\n",
    "# plt.show()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "33337b7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#using seaborn (heatmap) method finding coreleated columns.\n",
    "import seaborn as sns\n",
    "sns.heatmap(df.corr())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c7b2a6c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# deleting the correlated columns.\n",
    "del df[\"thickness\"]\n",
    "del df[\"diabetes_orig\"]\n",
    "del df[\"has_diabetes\"]\n",
    "#another method of deleting the column.\n",
    "#df.drop('thickness', axis = 1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4fbb3da5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_preg</th>\n",
       "      <th>glucose_conc</th>\n",
       "      <th>diastolic_bp</th>\n",
       "      <th>insulin</th>\n",
       "      <th>bmi</th>\n",
       "      <th>diab_pred</th>\n",
       "      <th>age</th>\n",
       "      <th>skin</th>\n",
       "      <th>diabetes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1.3790</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>1.1426</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0.9062</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1.3790</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   num_preg  glucose_conc  diastolic_bp  insulin   bmi  diab_pred  age  \\\n",
       "0         6           148            72        0  33.6      0.627   50   \n",
       "1         1            85            66        0  26.6      0.351   31   \n",
       "2         8           183            64        0  23.3      0.672   32   \n",
       "3         1            89            66       94  28.1      0.167   21   \n",
       "4         0           137            40      168  43.1      2.288   33   \n",
       "\n",
       "     skin  diabetes  \n",
       "0  1.3790      True  \n",
       "1  1.1426     False  \n",
       "2  0.0000      True  \n",
       "3  0.9062     False  \n",
       "4  1.3790      True  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head() #checking whether the colums are deleted or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "65ecb933",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_corr(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "47a718c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "diabetes_map={True:1, False:0}\n",
    "df[\"diabetes\"] = df[\"diabetes\"].map(diabetes_map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a458dbb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Diabetes patient is 268\n",
      "Number of Non Diabetes patient is 500\n",
      "Diabetes patient =  34.89583333333333 %\n",
      "Non Diabetes patient =  65.10416666666666 %\n"
     ]
    }
   ],
   "source": [
    "num_true = len(df.loc[df[\"diabetes\"] == True]) #checking how many diabetes patient are?\n",
    "num_false = len(df.loc[df[\"diabetes\"] == False])\n",
    "\n",
    "print('Number of Diabetes patient is', num_true)\n",
    "print('Number of Non Diabetes patient is', num_false)\n",
    "\n",
    "#converting into percentage for accuracy.\n",
    "print('Diabetes patient = ', (num_true/(num_true+num_false))*100,'%') \n",
    "print('Non Diabetes patient = ', (num_false/(num_true+num_false))*100,'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9e471df4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "feature_col_names = ['num_preg', 'glucose_conc', 'diastolic_bp', 'skin', 'insulin', 'bmi', 'diab_pred', 'age']\n",
    "\n",
    "predicted_class_names = ['diabetes']\n",
    "\n",
    "x = df[feature_col_names].values\n",
    "y = df[predicted_class_names].values\n",
    "\n",
    "split_test_size = 0.30\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=split_test_size, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ce1fa2c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(537, 8)\n",
      "(231, 8)\n",
      "(537, 1)\n",
      "(231, 1)\n"
     ]
    }
   ],
   "source": [
    "print(x_train.shape)\n",
    "print(x_test.shape)\n",
    "print(y_train.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "29e724e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "69.92% in training set\n",
      "30.08% in testing set\n"
     ]
    }
   ],
   "source": [
    "print('{0:0.2f}% in training set'.format((len(x_train)/len(df.index))*100))\n",
    "print('{0:0.2f}% in testing set'.format((len(x_test)/len(df.index))*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "21c399c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training true : 188 (3.5e+01%)\n",
      "training false : 349 (6.5e+01%)\n",
      "test true : 80 (3.5e+01%)\n",
      "test false : 151 (6.5e+01%)\n"
     ]
    }
   ],
   "source": [
    "print('training true : {0} ({1:0.2}%)'.format(len(y_train[y_train[:] == 1]),\n",
    "                                              (len(y_train[y_train[:] == 1])/len(y_train) * 100)))\n",
    "\n",
    "print('training false : {0} ({1:0.2}%)'.format(len(y_train[y_train[:] == 0]), \n",
    "                                              (len(y_train[y_train[:] == 0])/len(y_train) * 100)))\n",
    "\n",
    "print('test true : {0} ({1:0.2}%)'.format(len(y_test[y_test[:] == 1]), \n",
    "                                         (len(y_test[y_test[:] == 1])/len(y_test) * 100)))\n",
    "\n",
    "print('test false : {0} ({1:0.2}%)'.format(len(y_test[y_test[:] == 0]), \n",
    "                                          (len(y_test[y_test[:] == 0])/len(y_test) * 100)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d81f2f2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. Rows in dataframe 768\n",
      "2. Rows missing num_pref : 111\n",
      "3. Rows missing glucose_conc : 5\n",
      "4. Rows missing diastolic_bp : 35\n",
      "5. Rows missing diabetes : 500\n",
      "6. Rows missing insulin : 374\n",
      "7. Rows missing bmi : 11\n",
      "8. Rows missing diab_pred : 0\n",
      "9. Rows missing age : 0\n",
      "10. Rows missing skin : 227\n"
     ]
    }
   ],
   "source": [
    "print('1. Rows in dataframe {0}'.format(len(df)))\n",
    "print('2. Rows missing num_pref : {0}'.format(len(df.loc[df['num_preg'] == 0])))\n",
    "print('3. Rows missing glucose_conc : {0}'.format(len(df.loc[df['glucose_conc'] == 0])))\n",
    "print('4. Rows missing diastolic_bp : {0}'.format(len(df.loc[df['diastolic_bp'] == 0])))\n",
    "print('5. Rows missing diabetes : {0}'.format(len(df.loc[df['diabetes'] == 0])))\n",
    "print('6. Rows missing insulin : {0}'.format(len(df.loc[df['insulin'] == 0])))\n",
    "print('7. Rows missing bmi : {0}'.format(len(df.loc[df['bmi'] == 0])))\n",
    "print('8. Rows missing diab_pred : {0}'.format(len(df.loc[df['diab_pred'] == 0])))\n",
    "print('9. Rows missing age : {0}'.format(len(df.loc[df['age'] == 0])))\n",
    "print('10. Rows missing skin : {0}'.format(len(df.loc[df['skin'] == 0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7375f809",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9da0362a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.00000000e+00, 9.50000000e+01, 6.00000000e+01, 7.09200000e-01,\n",
       "        5.80000000e+01, 2.39000000e+01, 2.60000000e-01, 2.20000000e+01],\n",
       "       [5.00000000e+00, 1.05000000e+02, 7.20000000e+01, 1.14260000e+00,\n",
       "        3.25000000e+02, 3.69000000e+01, 1.59000000e-01, 2.80000000e+01],\n",
       "       [4.34056399e+00, 1.35000000e+02, 6.80000000e+01, 1.65480000e+00,\n",
       "        2.50000000e+02, 4.23000000e+01, 3.65000000e-01, 2.40000000e+01]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fill_0 = SimpleImputer(missing_values=0, strategy='mean')\n",
    "x_train = fill_0.fit_transform(x_train)\n",
    "x_test = fill_0.fit_transform(x_test)\n",
    "\n",
    "x_train[0:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92d5eae5",
   "metadata": {},
   "source": [
    "# Analaysing the data Using naive bayes algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "27ccb922",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "08c67da7",
   "metadata": {},
   "outputs": [],
   "source": [
    "nb_model = GaussianNB() #created object for GussianNB class.\n",
    "# in fit() function we will train our module(x_train and y_train)\n",
    "# fit() function is used for trainning purpose.\n",
    "nb_model.fit(x_train, y_train.ravel())\n",
    "# predict() function is used for testing purpose.\n",
    "nb_predict_train = nb_model.predict(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "042d30d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0ef77a1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Trained Data : 75.418994\n",
      "Accuracy of Tested Data : 73.593074\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy of Trained Data : {0:4f}'.format(metrics.accuracy_score(y_train, nb_predict_train) * 100))\n",
    "nb_predict_test = nb_model.predict(x_test)\n",
    "print('Accuracy of Tested Data : {0:4f}'.format(metrics.accuracy_score(y_test, nb_predict_test) *100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "df01de14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix\n",
      "[[118  33]\n",
      " [ 28  52]]\n"
     ]
    }
   ],
   "source": [
    "print('confusion matrix')\n",
    "print('{0}'.format(metrics.confusion_matrix(y_test,nb_predict_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "17c8b5b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report of data using naive bayes algorithm -  \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.78      0.79       151\n",
      "           1       0.61      0.65      0.63        80\n",
      "\n",
      "    accuracy                           0.74       231\n",
      "   macro avg       0.71      0.72      0.71       231\n",
      "weighted avg       0.74      0.74      0.74       231\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Classification Report of data using naive bayes algorithm -  ')\n",
    "print(metrics.classification_report(y_test, nb_predict_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d037c101",
   "metadata": {},
   "source": [
    "# Analaysing the data Using Random_Forest Algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8c0239ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "eadef453",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Trained Data : 100.000000 %\n",
      "Accuracy of Tested Data : 74.025974 %\n"
     ]
    }
   ],
   "source": [
    "rf_model = RandomForestClassifier(random_state=42)\n",
    "rf_model.fit(x_train, y_train.ravel())\n",
    "rf_predict_train = rf_model.predict(x_train)\n",
    "print('Accuracy of Trained Data : {0:4f}'.format(metrics.accuracy_score(y_train, rf_predict_train)*100),'%')\n",
    "rf_predict_test = rf_model.predict(x_test)\n",
    "print('Accuracy of Tested Data : {0:4f}'.format(metrics.accuracy_score(y_test, rf_predict_test)*100),'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "390b9faa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix\n",
      "[[119  32]\n",
      " [ 28  52]]\n"
     ]
    }
   ],
   "source": [
    "print('Confusion Matrix')\n",
    "print(metrics.confusion_matrix(y_test, rf_predict_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "71178415",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report of data Using Random Forest Classifier - \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.79      0.80       151\n",
      "           1       0.62      0.65      0.63        80\n",
      "\n",
      "    accuracy                           0.74       231\n",
      "   macro avg       0.71      0.72      0.72       231\n",
      "weighted avg       0.74      0.74      0.74       231\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Classification Report of data Using Random Forest Classifier - ')\n",
    "print(metrics.classification_report(y_test, rf_predict_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a6e448a",
   "metadata": {},
   "source": [
    "# Analysing data using Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8d8affb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "32b8e739",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Trained Data : 78.584730 %\n",
      "Accuracy of Tested Data : 73.593074 %\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Python310\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "lr_model = LogisticRegression()\n",
    "lr_model.fit(x_train, y_train.ravel())\n",
    "lr_predict_train = lr_model.predict(x_train)\n",
    "print('Accuracy of Trained Data : {0:4f}'.format(metrics.accuracy_score(y_train, lr_predict_train)*100),'%')\n",
    "lr_predict_test = lr_model.predict(x_test)\n",
    "print('Accuracy of Tested Data : {0:4f}'.format(metrics.accuracy_score(y_test, lr_predict_test)*100),'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6c60b4f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix\n",
      "[[123  28]\n",
      " [ 33  47]]\n"
     ]
    }
   ],
   "source": [
    "print('Confusion Matrix')\n",
    "print(metrics.confusion_matrix(y_test, lr_predict_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ea8f5309",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report of data Using Logistic Regression - \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.79      0.81      0.80       151\n",
      "           1       0.63      0.59      0.61        80\n",
      "\n",
      "    accuracy                           0.74       231\n",
      "   macro avg       0.71      0.70      0.70       231\n",
      "weighted avg       0.73      0.74      0.73       231\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Classification Report of data Using Logistic Regression - ')\n",
    "print(metrics.classification_report(y_test, lr_predict_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0caffc5c",
   "metadata": {},
   "source": [
    "# Analysing data using Decision Tree Classifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5534569b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9ca623ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Trained Data : 100.000000 %\n",
      "Accuracy of Tested Data : 73.160173 %\n"
     ]
    }
   ],
   "source": [
    "dtc_model = DecisionTreeClassifier()\n",
    "dtc_model.fit(x_train, y_train.ravel())\n",
    "dtc_predict_train = dtc_model.predict(x_train)\n",
    "print('Accuracy of Trained Data : {0:4f}'.format(metrics.accuracy_score(y_train, dtc_predict_train)*100),'%')\n",
    "dtc_predict_test = dtc_model.predict(x_test)\n",
    "print('Accuracy of Tested Data : {0:4f}'.format(metrics.accuracy_score(y_test, dtc_predict_test)*100),'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2a4c1560",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix\n",
      "[[113  38]\n",
      " [ 24  56]]\n"
     ]
    }
   ],
   "source": [
    "print('Confusion Matrix')\n",
    "print(metrics.confusion_matrix(y_test, dtc_predict_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ceacd7ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report of data Using Decision Tree Classifier - \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.75      0.78       151\n",
      "           1       0.60      0.70      0.64        80\n",
      "\n",
      "    accuracy                           0.73       231\n",
      "   macro avg       0.71      0.72      0.71       231\n",
      "weighted avg       0.75      0.73      0.74       231\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Classification Report of data Using Decision Tree Classifier - ')\n",
    "print(metrics.classification_report(y_test, dtc_predict_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbc93678",
   "metadata": {},
   "source": [
    "# Analysing data using KNN - K Nearest Neighbour Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a68e8d81",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "92d27067",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Trained Data : 80.446927 %\n",
      "Accuracy of Tested Data : 73.593074 %\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Python310\\lib\\site-packages\\sklearn\\neighbors\\_classification.py:237: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.\n",
      "  mode, _ = stats.mode(_y[neigh_ind, k], axis=1)\n",
      "C:\\Python310\\lib\\site-packages\\sklearn\\neighbors\\_classification.py:237: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.\n",
      "  mode, _ = stats.mode(_y[neigh_ind, k], axis=1)\n"
     ]
    }
   ],
   "source": [
    "knn_model = KNeighborsClassifier()\n",
    "knn_model.fit(x_train, y_train.ravel())\n",
    "knn_predict_train = knn_model.predict(x_train)\n",
    "print('Accuracy of Trained Data : {0:4f}'.format(metrics.accuracy_score(y_train, knn_predict_train)*100),'%')\n",
    "knn_predict_test = knn_model.predict(x_test)\n",
    "print('Accuracy of Tested Data : {0:4f}'.format(metrics.accuracy_score(y_test, knn_predict_test)*100),'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b97a8839",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix\n",
      "[[119  32]\n",
      " [ 29  51]]\n"
     ]
    }
   ],
   "source": [
    "print('Confusion Matrix')\n",
    "print(metrics.confusion_matrix(y_test, knn_predict_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "19b0b820",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report of data Using K Neighbors Classifier - \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.79      0.80       151\n",
      "           1       0.61      0.64      0.63        80\n",
      "\n",
      "    accuracy                           0.74       231\n",
      "   macro avg       0.71      0.71      0.71       231\n",
      "weighted avg       0.74      0.74      0.74       231\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Classification Report of data Using K Neighbors Classifier - ')\n",
    "print(metrics.classification_report(y_test, knn_predict_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ca42732",
   "metadata": {},
   "source": [
    "# Analysing data using SVM - Support Vector Model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ea9004c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f8bbdfb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of Trained Data : 77.094972 %\n",
      "Accuracy of Tested Data : 74.025974 %\n"
     ]
    }
   ],
   "source": [
    "svc_model = SVC()\n",
    "svc_model.fit(x_train, y_train.ravel())\n",
    "svc_predict_train = svc_model.predict(x_train)\n",
    "print('Accuracy of Trained Data : {0:4f}'.format(metrics.accuracy_score(y_train, svc_predict_train)*100),'%')\n",
    "svc_predict_test = svc_model.predict(x_test)\n",
    "print('Accuracy of Tested Data : {0:4f}'.format(metrics.accuracy_score(y_test, svc_predict_test)*100),'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ba153cbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix\n",
      "[[133  18]\n",
      " [ 42  38]]\n"
     ]
    }
   ],
   "source": [
    "print('Confusion Matrix')\n",
    "print(metrics.confusion_matrix(y_test, svc_predict_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "1467fc17",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report of data Using SVC - \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.88      0.82       151\n",
      "           1       0.68      0.47      0.56        80\n",
      "\n",
      "    accuracy                           0.74       231\n",
      "   macro avg       0.72      0.68      0.69       231\n",
      "weighted avg       0.73      0.74      0.73       231\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Classification Report of data Using SVC - ')\n",
    "print(metrics.classification_report(y_test, svc_predict_test))"
   ]
  },
  {
   "cell_type": "raw",
   "id": "fe1f589d",
   "metadata": {},
   "source": [
    "# Accuracy rate of following algorithm of Trained and Tested Data.\n",
    "\n",
    "# Algorithm Name      Trained Data     Tested Data\n",
    "\n",
    "# Naive Bayes           75%                73%\n",
    "\n",
    "# Random Forest         100%               74%\n",
    "\n",
    "# Logistic Regression   78%                73%\n",
    "\n",
    "# Decision Tree         100%               70%\n",
    "\n",
    "# KNN                   80%                73%\n",
    "\n",
    "# SVM                   77%                74%"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4636f7db",
   "metadata": {},
   "source": [
    "# After Using all algorithm Random Forest algorithm gives high accurate outcome where 'Trained data' accuracy is 100% and 'Tested data' accuracy is 74% which is a higher accuracy rate as compare to all other algorithm. \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
